---
import type { GetStaticPaths } from 'astro';

import Layout from '../../components/layout.astro';
import Ld from '../../components/ld.astro';
import ParticipantName from '../../components/participant-name.astro';
import SettlementName from '../../components/settlement-name.astro';
import getBirthMicrodata from '../../ld/birth-microdata';
import getDeathMicrodata from '../../ld/death-microdata';
import getMarriageMicrodata from '../../ld/marriage-microdata';
import type { Act } from '../../schemas/act';
import { getCollection, getEntry } from '../../services/astro-content';
import convertParishRegistersToActs from '../../utils/convert-parish-registers-to-acts';
import formatDate from '../../utils/format-date';
import getActParticipants from '../../utils/get-act-participants';

export const getStaticPaths = (async () => {
  const parishRegisters = await getCollection('parish-register-tables');

  const acts = convertParishRegistersToActs(
    parishRegisters.map(({ data }) => data),
  );
  return acts.map((act) => ({
    params: {
      id: act.id,
    },
    props: { act },
  }));
}) satisfies GetStaticPaths;

export interface Props {
  act: Act;
}

const { act } = Astro.props;

const [archiveId, fonds, series, item] = act.id.split('-');
const itemId = [archiveId, fonds, series, item].join('-');

const archive = await getEntry('archives', archiveId!);
const archiveItem = await getEntry('archive-items', itemId);
const settlement = await getEntry('settlements', act.settlement);
if (!settlement) {
  throw new Error('No settlement: ' + act.settlement);
}
let microdata: unknown;
switch (act.act_type) {
  case 'народження':
    microdata = getBirthMicrodata(act, settlement.data);
    break;
  case 'смерть':
    microdata = getDeathMicrodata(act, settlement.data);
    break;
  case 'шлюб':
    microdata = getMarriageMicrodata(act, settlement.data);
    break;
  default:
}
---

<Layout title={act.title}>
  <style slot="head">
    section {
      margin-bottom: 2rem;
    }
    h2 {
      color: #343a40; /* Dark grey text */
      border-bottom: 2px solid #343a40; /* Dark grey border */
      padding-bottom: 0.5rem;
      font-family: 'Times New Roman', serif;
    }
    time {
      font-size: 1.2rem;
      color: #555;
    }
    ul {
      list-style-type: none;
      padding: 0;
    }
    li {
      background-color: #f9f9f9;
      margin: 0.5rem 0;
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    footer {
      margin-top: 2rem;
      padding-top: 1rem;
      border-top: 1px solid #ddd;
      color: #777;
    }
    .participant-note {
      margin-top: 0.5rem;
      padding: 0.5rem;
      background-color: #f9f9f9;
      border-left: 4px solid #343a40; /* Dark grey border */
      font-size: 0.9rem;
      color: #555;
      border-radius: 4px;
    }
  </style>
  {microdata && <Ld microdata={microdata} slot="head" />}
  <section>
    <h2>Дата</h2>
    <time datetime={new Date(act.date).toISOString()}>{formatDate(act.date)}</time>
  </section>
  <section>
    <h2>Місце</h2>
    <p><SettlementName settlement={act.settlement} /></p>
  </section>
  <section>
    <h2>Учасники</h2>
    <ul>
      {
        getActParticipants(act).map((participant) => (
          <li>
            <strong>{participant.role}:</strong>{' '}
            <ParticipantName act={act} participant={participant} />
            {participant.note && (
              <p class="participant-note"><i>{participant.note}</i></p>
            )}
          </li>
        ))
      }
    </ul>
  </section>
  <footer>
    <p>
      Справа <a href={`/archive-item/${itemId}`}>{archive!.data.shortTitle} {archiveItem!.data.identifier}</a>, розворот {
        act.page
      }, акт {act.number}
    </p>
  </footer>
</Layout>
