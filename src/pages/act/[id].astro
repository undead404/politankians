---
import { getCollection, getEntry } from 'astro:content';
import type { GetStaticPaths } from 'astro';

import Layout from '../../components/layout.astro';
import Ld from '../../components/ld.astro';
import ParticipantName from '../../components/participant-name.astro';
import getBirthMicrodata from '../../ld/birth-microdata';
import getDeathMicrodata from '../../ld/death-microdata';
import getMarriageMicrodata from '../../ld/marriage-microdata';
import type { Act } from '../../schemas/act';
import convertParishRegistersToActs from '../../utils/convert-parish-registers-to-acts'
import formatDate from '../../utils/format-date';

export const getStaticPaths = (async () => {
  const archiveItems = await getCollection('parish-register-tables');

  const acts = convertParishRegistersToActs(archiveItems.map(({data}) => data));
  return acts.map((act) => ({
    params: {
      id: act.objectID,
    },
    props: { act },
  }));
}) satisfies GetStaticPaths;

export interface Props {
  act: Act;
}

const { act } = Astro.props;

const [archive, fonds, series, item] = act.objectID.split('-');
const itemId = [archive, fonds, series, item].join('-');

const settlement = await getEntry('settlements', act.settlement);
let microdata: unknown;
switch (act.act_type) {
    case 'народження':
        microdata = getBirthMicrodata(act, settlement.data);
        break;
    case 'смерть':
        microdata = getDeathMicrodata(act, settlement.data);
        break;
    case 'шлюб':
        microdata = getMarriageMicrodata(act, settlement.data);
        break;
    default:            
}
---

<Layout title={act.title}>
    <style slot="head">
      section {
        margin-bottom: 2rem;
      }
      h2 {
        color: #4caf50;
        border-bottom: 2px solid #4caf50;
        padding-bottom: 0.5rem;
        font-family: 'Georgia', serif;
      }
      time {
        font-size: 1.2rem;
        color: #555;
      }
      ul {
        list-style-type: none;
        padding: 0;
      }
      li {
        background-color: #f9f9f9;
        margin: 0.5rem 0;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      footer {
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #ddd;
        color: #777;
      }
      .participant-note {
        margin-top: 0.5rem;
        padding: 0.5rem;
        background-color: #f9f9f9;
        border-left: 4px solid #4caf50;
        font-size: 0.9rem;
        color: #555;
        border-radius: 4px;
      }
    </style>
    <Ld microdata={microdata} slot="head" />
  <section>
    <h2>Дата</h2>
    <time datetime={act.date}
      >{formatDate(act.date)}</time
    >
  </section>
  <section>
    <h2>Учасники</h2>
    <ul>
      {
        Object.values(act.participants).map((participant) => (
          <li>
            <strong>{participant.role}:</strong>{' '}
            <ParticipantName  participant={participant} />
            {participant.note && (
              <div class="participant-note">{participant.note}</div>
            )}
          </li>
        ))
      }
    </ul>
  </section>
  <footer>
    <p>Справа <a href={`/archive-item/${itemId}`}>{itemId}</a>, розворот {act.page}, акт {act.number}</p>
  </footer>
</Layout>
